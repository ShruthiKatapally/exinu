#include <kernel.h>
#include <future.h>

syscall future_get(future *f, int *value) 
{
 
  if(f->state == FUTURE_EMPTY)
{
    switch(f->flag) 
    {
      case FUTURE_EXCLUSIVE:
        //kprintf("future empty\n");
        f->state = FUTURE_WAITING;
        future_wait(f);
        *value = f->value;
        f->state = FUTURE_EMPTY;
        //kprintf("future consumed\n");
        break;

      case FUTURE_SHARED:
	  f->state = FUTURE_WAITING;
	  //kprintf("future_empty #get in shared mode \n");
	  enqueue(gettid(), f->get_queue);
          future_wait(f);
          *value = f->value;
	  if(isempty(f->get_queue))
            f->state = FUTURE_EMPTY;
	 break;

      case FUTURE_QUEUE:
        if(isempty(f->set_queue)) {
          //if the get queue is empty, wait on this future
	  //kprintf("reached queue empty in get. q# %d\n",f->set_queue);
	  enqueue(gettid(), f->get_queue);
          future_wait(f);
	  future_get(f,value);
        }
        else {
          //else signal future and consume the value generated by it
	  enqueue(gettid(), f->get_queue);
          future_signal(f);
	  future_wait(f);
	  future_get(f,value);
        }
        break;

      default:
        return SYSERR;
        break;
    }
  } 
  else if(f->state == FUTURE_WAITING){
    switch(f->flag) {
      case FUTURE_EXCLUSIVE:
        return SYSERR;
        break;

      case FUTURE_SHARED:
	  enqueue(gettid(), f->get_queue);
          future_wait(f);
          *value = f->value;
	  if(isempty(f->get_queue))
            f->state = FUTURE_EMPTY;
        break;

      case FUTURE_QUEUE:
        break;

      default:
        return SYSERR;
        break;
    }
  } 
  else if(f->state == FUTURE_VALID){
    switch(f->flag) {
      case FUTURE_EXCLUSIVE:
        *value = f->value;
        f->state = FUTURE_EMPTY;
        break;

      case FUTURE_SHARED:
	*value = f->value;
        if(isempty(f->get_queue))
          f->state = FUTURE_EMPTY;
        break;

      case FUTURE_QUEUE:
        *value = f->value;
        f->state = FUTURE_EMPTY;
        break;

      default:
        return SYSERR;
        break;
    }
  }
  else {
   //kprintf("invalid future state\n");
    return SYSERR;
  }
  return OK;
}
